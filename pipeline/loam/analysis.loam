/* Analysis Pipeline */
import loamstream.util.Files

// Binaries
val software = path("/humgen/diabetes/users/ryank/software")
val tabix = software / "htslib-1.3/bin/tabix"

val epacts = path("/broad/software/free/Linux/redhat_6_x86_64/pkgs/epacts_3.2.6/bin/epacts")
val python = "python"

// Scripts
val getBins = "/humgen/diabetes/users/kyuksel/pipeline/analysis/workingexampleofvcfmapping/get_bins.py"

// Inputs
val vcf = store.at("/humgen/diabetes2/users/ryank/data/camp/data_clean/camp.biallelic.chr1-22.clean.vcf.gz")
val ped = store.at("/humgen/diabetes2/users/ryank/data/camp/phenotype/camp.phenotypes.epacts.unrelated.ped")

// Conf
val outDirName = "analysis"
val outDir = path(outDirName)
val pheno = "GLU_FAST_RIN"
val startChromosome = 1
val endChromosome = 22
val numVars = 5000

// Pipeline Definition
local {
  for (chr <- startChromosome to endChromosome) {
    val variantsFileName = s"chr${chr}.variants.gz"
    val variants = store.at(outDir / variantsFileName)
    val variantsIndex = store.at(outDir / s"${variantsFileName}.tbi")
    val regionsFileName = s"chr${chr}.${numVars}pos.regions"
    val regionsStore = store.at(outDir / regionsFileName)

    // Generate regions file
    cmd"""zcat $vcf | grep -v "^#" | awk -v chr=$chr '{if($$1 == chr) print $$0}' | cut -f-5 | bgzip -c > $variants""".in(vcf).out(variants)
    cmd"""$tabix -f -b 2 -e 2 $variants""".in(variants).out(variantsIndex)
    cmd"""$python $getBins --vcf $variants --out $regionsStore --n $numVars""".in(variants, variantsIndex).out(regionsStore)
  }
}

// Run analysis for each region
andThen {
  uger {
    for (chr <- startChromosome to endChromosome) {
      val regionsFileName = s"chr${chr}.${numVars}pos.regions"
      val regions = Files.readFrom(outDir / s"$regionsFileName").split(System.lineSeparator)

      for (region <- regions) {
        val epactsOutputFilesBaseName = s"$outDirName/CAMP.${pheno}.chr${region}".replace(':', '.')

        cmd"""$epacts single
          --vcf $vcf
          --ped $ped
          --pheno $pheno
          --cov AGE_T2D_HEALTH_PROVIDER
          --cov SEX
          --cov PC1
          --cov PC2
          --cov PC3
          --region $region
          --test q.linear
          --out $epactsOutputFilesBaseName
          --no-plot
          --run 1""".using("GCC-5.2", "R-3.1", "Gnuplot").in(vcf, ped)
      }
    }
  }
}
