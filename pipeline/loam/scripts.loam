import config._

val scriptsDir = path(pipelineConfig.getStr("scripts"))

val pyAlignNon1kgVariants                      = scriptsDir / "align_non1kg_variants.py"
val pyHailLoad                                 = scriptsDir / "hail_load.py"
val pyHailFilter                               = scriptsDir / "hail_filter.py"
val pyHailAncestryPcaMerge1kg                  = scriptsDir / "hail_ancestry_pca_merge_1kg.py"
val pyHailPcaMerge1kg                          = scriptsDir / "hail_pca_merge_1kg.py"
val pyHailSampleqc                             = scriptsDir / "hail_sampleqc.py"
val pyHailSexcheck                             = scriptsDir / "hail_sexcheck.py"
val pyHailFilterFinal                          = scriptsDir / "hail_filter_final.py"
val pyHailListSamples                          = scriptsDir / "hail_list_samples.py"
val pyHailAssoc                                = scriptsDir / "hail_assoc.py"
val pyHailMerge                                = scriptsDir / "hail_merge.py"
val pyQqPlot                                   = scriptsDir / "qqplot.py"
val pyMhtPlot                                  = scriptsDir / "mhtplot.py"
val pyExtractTopRegions                        = scriptsDir / "extract_top_regions.py"
val pyCompileExclusions                        = scriptsDir / "compile_exclusions.py"
val pyGenerateQcReportIntro                    = scriptsDir / "generate_qc_report_intro.py"
val pyGenerateQcReportData                     = scriptsDir / "generate_qc_report_data.py"
val pyGenerateQcReportAncestry                 = scriptsDir / "generate_qc_report_ancestry.py"
val pyGenerateQcReportIbdSexcheck              = scriptsDir / "generate_qc_report_ibd_sexcheck.py"
val pyGenerateQcReportSampleqc                 = scriptsDir / "generate_qc_report_sampleqc.py"
val pyGenerateQcReportVariantqc                = scriptsDir / "generate_qc_report_variantqc.py"
val pyGenerateQcReportBibliography             = scriptsDir / "generate_qc_report_bibliography.py"
val pyGenerateAnalysisReportIntro              = scriptsDir / "generate_analysis_report_intro.py"
val pyGenerateAnalysisReportData               = scriptsDir / "generate_analysis_report_data.py"
val pyGenerateAnalysisReportStrategy           = scriptsDir / "generate_analysis_report_strategy.py"
val pyGenerateAnalysisReportPhenoSummary       = scriptsDir / "generate_analysis_report_pheno_summary.py"
val pyGenerateAnalysisReportPhenoCalibration   = scriptsDir / "generate_analysis_report_pheno_calibration.py"
val pyGenerateAnalysisReportPhenoTopLoci       = scriptsDir / "generate_analysis_report_pheno_top_loci.py"
val pyGenerateAnalysisReportPhenoKnownLoci     = scriptsDir / "generate_analysis_report_pheno_known_loci.py"
val pyGenerateAnalysisReportBibliography       = scriptsDir / "generate_analysis_report_bibliography.py"
val pyMergeVariantLists                        = scriptsDir / "merge_variant_lists.py"
val pyTop1000                                  = scriptsDir / "top1000.py"
val pyAddGeneAnnot                             = scriptsDir / "add_gene_annot.py"
val pyPhenoDistPlot                            = scriptsDir / "pheno_dist_plot.py"
val shKing                                     = scriptsDir / "king.sh"
val rFindBestDuplicateVariants                 = scriptsDir / "find_best_duplicate_variants.r"
val rAncestryClusterMerge                      = scriptsDir / "ancestry_cluster_merge.r"
val rAncestryClusterTable                      = scriptsDir / "ancestry_cluster_table.r"
val rCalcKinshipFamSizes                       = scriptsDir / "calc_kinship_fam_sizes.r"
val rPcair                                     = scriptsDir / "pcair.r"
val rPcrelate                                  = scriptsDir / "pcrelate.r"
val rPlotAncestryPca                           = scriptsDir / "plot_ancestry_pca.r"
val rPlotAncestryCluster                       = scriptsDir / "plot_ancestry_cluster.r"
val rIstatsPcsGmmClusterPlot                   = scriptsDir / "istats_pcs_gmm_cluster_plot.r"
val rIstatsPcsGmmPlotMetrics                   = scriptsDir / "istats_pcs_gmm_plot_metrics.r"
val rIstatsAdjGmmPlotMetrics                   = scriptsDir / "istats_adj_gmm_plot_metrics.r"
val rCalcIstatsAdj: Path                       = scriptsDir / "calc_istats_adj.r"
val rIstatsAdjPca: Path                        = scriptsDir / "istats_adj_pca.r"
val rGeneratePheno: Path                       = scriptsDir / "generate_pheno.r"
val rVariantsSummaryTable                      = scriptsDir / "variants_summary_table.r"
val rUpsetplotBimFam: Path                     = scriptsDir / "upsetplot.bimfam.r"
val rMakeOutlierTable: Path                    = scriptsDir / "make_outlier_table.r"
val rMakeMetricDistPlot                        = scriptsDir / "make_metric_dist_plot.r"
val rMakeSampleqcOutlierPlot                   = scriptsDir / "make_sampleqc_outlier_plot.r"
val rTop20                                     = scriptsDir / "top20.r"
val rTop50Known                                = scriptsDir / "top50_known.r"
